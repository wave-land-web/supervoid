---
import { Icon } from 'astro-icon/components'
import { Picture } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'

export interface Props {
  work: CollectionEntry<'lighting'>
}

const { work } = Astro.props
const cardId = work.data.title.split(' ').join('-').toLowerCase()
---

<div
  id={`lighting-preview-card-${cardId}`}
  class="lighting-preview-card group relative pb-[56.25%] h-0 overflow-hidden w-full lsa lsa-slide-up no-repeat rounded-xl"
>
  <iframe
    id={`player-${cardId}`}
    src={work.data.youtubeId}
    class="absolute top-0 left-0 w-full h-full border-0"
    title="Video player"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    referrerpolicy="strict-origin-when-cross-origin"
    loading="lazy"
    allowfullscreen></iframe>

  <!-- Overlay: image, play button, and project title -->
  <div id={`image-${cardId}`} class="absolute top-0 left-0 w-full h-full">
    <Picture
      class="w-full brightness-75 group-[.playing]:brightness-100 group-[.playing]:scale-105 transition duration-500"
      src={work.data.poster}
      alt={work.data.title}
    />

    <button
      id={`play-button-${cardId}`}
      class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
    >
      <Icon
        name="play"
        class="size-[90px] p-6 md:bg-black md:hover:bg-magenta-900 active:scale-95 rounded-full md:shadow-lg transition duration-[0.4s]"
      />
    </button>

    <div class="absolute bottom-0 w-full flex items-center gap-3">
      <Icon
        name="tabler:eye-closed"
        class="group-[.playing]:hidden w-10 h-10 p-2 flex-shrink-0 bg-white text-black rounded-full transition"
      />
      <Icon
        name="tabler:eye"
        class="hidden group-[.playing]:block w-10 h-10 p-2 flex-shrink-0 bg-white text-black rounded-full transition"
      />

      <h2
        class="title-marquee relative overflow-hidden px-4 py-1 bg-magenta-900 text-xs uppercase text-white rounded-full"
      >
        <div class="wrapper">
          <span data-name={work.data.title} class="block whitespace-nowrap">
            {work.data.title}
          </span>
        </div>
      </h2>
    </div>
  </div>
</div>

<style>
  /* Marquee Styles */

  .lighting-preview-card.playing span {
    animation: lightingTitleMarquee 4s linear 0s infinite;
  }

  .lighting-preview-card.playing .title-marquee .wrapper {
    opacity: 1;
    overflow-x: hidden;
    mask-image: linear-gradient(
      to right,
      hsl(0 0% 0% / 0),
      hsl(0 0% 0% / 1) 2%,
      hsl(0 0% 0% / 1) 98%,
      hsl(0 0% 0% / 0)
    );
    user-select: none;
  }

  @media (min-width: 768px) {
    .lighting-preview-card.playing .title-marquee .wrapper {
      mask-image: linear-gradient(
        to right,
        hsl(0 0% 0% / 0),
        hsl(0 0% 0% / 1) 4%,
        hsl(0 0% 0% / 1) 96%,
        hsl(0 0% 0% / 0)
      );
    }
  }

  .title-marquee {
    display: flex;
  }

  .title-marquee:before {
    content: '';
    width: 100%;
    height: 100%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: -1;
    background: var(--color-magenta-900);
  }

  .title-marquee span {
    display: inline-block;
  }

  .title-marquee span:after {
    content: attr(data-name);
    position: absolute;
    top: 0;
    left: 102%;
  }

  @keyframes lightingTitleMarquee {
    from {
      transform: translateX(0);
    }
    to {
      /* This prevents "skipping" on animation reset */
      transform: translateX(-102%);
    }
  }
</style>

<script define:vars={{ cardId }}>
  const lightingPreviewCard = document.querySelector(`#lighting-preview-card-${cardId}`)
  const cards = document.querySelectorAll('.lighting-preview-card')
  const image = document.querySelector(`#image-${cardId}`)
  const playButton = document.querySelector(`#play-button-${cardId}`)

  // Play video
  function playVideo() {
    image.classList.add('hidden')
  }

  // Activate card animations
  function playCard() {
    lightingPreviewCard.classList.add('playing')
  }
  function stopCard() {
    lightingPreviewCard.classList.remove('playing')
  }

  // Activate card on scroll
  function handlePlayOnScroll() {
    if (!window.IntersectionObserver) {
      return console.log('IntersectionObserver not supported')
    }

    // Configure observer options
    if (cards.length !== 0) {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0,
      }

      // Initialize observer
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            playCard()
          } else if (!entry.isIntersecting) {
            stopCard()
          }
        })
      }, options)

      cards.forEach((section) => observer.observe(section))
    }
  }

  // Event listeners
  if (window.innerWidth < 768) {
    // Mobile
    document.addEventListener('scroll', handlePlayOnScroll)
  } else {
    // Desktop
    lightingPreviewCard.addEventListener('mouseover', playCard)
    lightingPreviewCard.addEventListener('mouseout', stopCard)
  }

  // Play video on click
  playButton.addEventListener('click', playVideo)
</script>
