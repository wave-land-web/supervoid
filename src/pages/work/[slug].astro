---
import { Icon } from 'astro-icon/components'
import { getCollection } from 'astro:content'
import Layout from '../../layouts/Layout.astro'
import Pagination from '../../components/ui/Pagination.astro'
import { Picture } from 'astro:assets'

export async function getStaticPaths() {
  const allPosts = await getCollection('work')

  return allPosts.map((post) => ({
    params: {
      slug: post.slug,
    },
    props: {
      allPosts,
      post,
    },
  }))
}

const { post, allPosts } = Astro.props
const currentPostID = +post.data.id
const prevPost = allPosts.find((p) => +p.data.id === currentPostID + 1)
const nextPost = allPosts.find((p) => +p.data.id === currentPostID - 1)
---

<Layout title={`Work - ${post.data.title}`} description={post.data.info[0]}>
  <header class="pt-[var(--nav-height)]">
    <div class="relative pb-[56.25%] h-0 rounded-xl overflow-hidden lsa no-repeat">
      <mux-player
        playback-id={post.data.gifs.hero}
        metadata-video-title={`Supervoid Work Page: ${post.data.title}`}
        accent-color="var(--color-magenta-900)"
        class="w-full"></mux-player>
      <h1
        data-page-title
        class="absolute left-1 bottom-1 z-50 mr-1 px-4 py-1 bg-magenta-900 text-xs md:text-base lg:text-s uppercase text-white rounded-full"
      >
        {post.data.title}
      </h1>
    </div>
  </header>

  <main>
    <section id="work-details" class="lsa no-repeat pt-4 pb-8">
      <div
        id="info-details"
        class="w-full md:grid md:grid-cols-[1fr_4fr] items-start gap-4 lg:gap-8 border-t-[1px] border-b-[1px] py-4 md:py-6 cursor-pointer"
      >
        <button class="flex items-center gap-3" aria-label="Show/Hide Info" title="Show/Hide Info">
          <Icon
            data-info-icon
            name="tabler:plus"
            class="w-10 h-10 flex-shrink-0 bg-white text-black rounded-full p-2 hover:scale-105 active:scale-95 transition duration-(--transition)"
          />
          <h2 class="px-4 py-1 bg-magenta-900 text-xs uppercase text-white rounded-full">info</h2>
        </button>

        <div
          id="info-content"
          class="active h-0 opacity-0 overflow-hidden transition duration-(--transition) [.active]:h-auto [.active]:mt-4 [.active]:md:mt-0 [.active]:opacity-100"
        >
          {post.data.info.map((item: string) => <p class="mb-4" set:html={item} />)}
        </div>
      </div>

      <div
        id="credits-details"
        class="w-full md:grid md:grid-cols-[1fr_4fr] items-start gap-4 lg:gap-8 border-b-[1px] py-4 md:py-6 cursor-pointer"
      >
        <button
          class="flex items-center gap-3"
          aria-label="Show/Hide Credits"
          title="Show/Hide Credits"
        >
          <Icon
            data-credits-icon
            name="tabler:plus"
            class="w-10 h-10 flex-shrink-0 bg-white text-black rounded-full p-2 rotate-45 hover:scale-105 active:scale-95 transition duration-(--transition)"
          />
          <h2 class="px-4 py-1 bg-magenta-900 text-xs uppercase text-white rounded-full">
            credits
          </h2>
        </button>

        <div
          id="credits-content"
          class="h-0 opacity-0 overflow-hidden transition duration-(--transition) [.active]:h-auto [.active]:mt-4 [.active]:md:mt-0 [.active]:opacity-100"
        >
          <div
            set:html={post.data.credits && post.data.credits[0]}
            class="flex flex-col gap-8 mb-4"
          />
        </div>
      </div>
    </section>

    <section id="work-gifs" class="grid md:grid-cols-2 md:gap-x-10 gap-y-8 md:gap-y-12">
      {
        post.data.gifs.gallery.map((gif: string) => (
          <article class="relative pb-[56.25%] h-0 rounded-xl overflow-hidden lsa lsa-slide-up no-repeat">
            <mux-player
              playback-id={gif}
              accent-color="var(--color-magenta-900)"
              class="w-full"
              style="--controls: none;"
              loop
              muted
              autoplay
            />
          </article>
        ))
      }

      {
        post.data.images &&
          post.data.images.map((image) => (
            <Picture
              src={image}
              alt={post.data.title}
              formats={['avif', 'webp']}
              class="aspect-video object-cover lsa lsa-slide-up no-repeat"
            />
          ))
      }
    </section>

    <Pagination
      prevPost={prevPost}
      nextPost={nextPost}
      prevPostSlug={`/work/${prevPost?.slug}`}
      nextPostSlug={`/work/${nextPost?.slug}`}
      prevPostTitle={prevPost?.data.title}
      nextPostTitle={nextPost?.data.title}
    />
  </main>
</Layout>

<script>
  const muxPlayer = document.querySelector(`mux-player`) as HTMLVideoElement
  const title = document.querySelector(`[data-page-title]`) as HTMLElement
  const infoDetails = document.querySelector(`#info-details`) as Element
  const infoContent = document.querySelector(`#info-content`) as HTMLElement
  const infoIcon = document.querySelector(`[data-info-icon]`) as Element
  const creditsDetails = document.querySelector(`#credits-details`) as Element
  const creditsContent = document.querySelector(`#credits-content`) as HTMLElement
  const creditsIcon = document.querySelector(`[data-credits-icon]`) as Element

  function handlePlayVideo() {
    title?.classList.add('hidden')
  }

  function handlePauseVideo() {
    title?.classList.remove('hidden')
  }

  // Show/hide details and handle icon rotation
  function handleShowHideDetails(icon: Element, content: HTMLElement) {
    icon.classList.toggle('rotate-45')
    content.classList.toggle('active')
  }

  infoDetails!.addEventListener('click', () => handleShowHideDetails(infoIcon, infoContent))
  creditsDetails?.addEventListener('click', () =>
    handleShowHideDetails(creditsIcon, creditsContent)
  )
  muxPlayer.addEventListener('play', handlePlayVideo)
  muxPlayer.addEventListener('pause', handlePauseVideo)
</script>
