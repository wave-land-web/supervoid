---
import '../styles/global.css'
import Navigation from '../components/ui/Navigation.astro'
import Marquee from '../components/ui/Marquee.astro'
import Footer from '../components/ui/Footer.astro'

export interface Props {
  title: string
  description?: string
  socialImage?: string
}

const {
  title,
  description = 'SUPERVOID is a visual design studio specializing in dynamic, interactive media for live performances, narrative film, and brand identity. We blend creativity with technical expertise to push the boundaries of visual storytelling and captivate audiences.',
  socialImage,
} = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const socialImageURL = new URL(socialImage || 'images/og-image.png', canonicalURL)
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />

    <!-- SEO -->
    <title>SUPERVOID | {title}</title>
    <meta name="title" content={`SUPERVOID | ${title}`} />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Facebook -->
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={`SUPERVOID | ${title}`} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:domain" content="supervoid.tv" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={`SUPERVOID | ${title}`} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImageURL} />

    <!-- Favicon -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#000000" />
    <meta name="msapplication-TileColor" content="#000000" />
    <meta name="theme-color" content="#000000" />

    <!-- Preload Fonts -->
    <link
      rel="preload"
      href="/fonts/rotonto-regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/sf-mono-regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- TODO: Umami Analytics -->

    <!-- MUX script -->
    <script src="https://cdn.jsdelivr.net/npm/@mux/mux-player"></script>

    <title>SUPERVOID | {title}</title>
  </head>

  <body class="font-body bg-black text-white">
    <div id="wrapper" class="z-10 bg-black">
      <div class="max-w-screen-2xl mx-auto">
        {!Astro.url.pathname.includes('/reel') && <Navigation />}
        <slot name="video-slot" />
      </div>
      <slot />
      {!Astro.url.pathname.includes('/reel') && <Marquee class="mb-96" />}
    </div>
    {!Astro.url.pathname.includes('/reel') && <Footer />}
  </body>
</html>

<script is:inline data-astro-rerun>
  /**
   * Animate sections with the class `lsa` when they come into view
   */
  function handleAnimations() {
    if (!window.IntersectionObserver) {
      return console.log('IntersectionObserver not supported')
    }

    // Grab all sections to be animated
    const sections = document.querySelectorAll('.lsa')

    // Configure observer options
    if (sections.length !== 0) {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.25,
      }

      // Initialize observer
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const section = entry.target

          // By default, animations repeat on scroll unless the section has the class `no-repeat`
          if (entry.isIntersecting) {
            section.classList.add('active')
          } else if (!entry.isIntersecting && !section.classList.contains('no-repeat')) {
            section.classList.remove('active')
          }
        })
      }, options)

      // Observe each section with the class `lsa`
      sections.forEach((section) => observer.observe(section))
    }
  }

  // Handle animations on page load
  document.addEventListener('DOMContentLoaded', () => {
    handleAnimations()

    // Handle animations on scroll
    document.addEventListener('scroll', handleAnimations)
  })
</script>
